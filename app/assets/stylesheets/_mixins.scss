@charset "UTF-8";

// Media queries
@mixin mq($mq-breakpoint) {
  @if map-has-key($mq-breakpoints, $mq-breakpoint) {
    $mq-device: '';
    @if $enable-mq-device == true {
      $mq-device: '-device';
    }

    $mq-range: 'min';
    @if $mq-breakpoint == nth(map-keys($mq-breakpoints), 1) {
      $mq-range: 'max';
    }

    @media all and (#{$mq-range}#{$mq-device}-width: map-get($mq-breakpoints, $mq-breakpoint)) {
      @content;
    }
  }
}

// Container
@mixin container {
  width: 100%;
  margin: {
    right: auto;
    left: auto;
  };

  @each $mq-container-width in $mq-container-widths {
    $mq: nth($mq-container-width, 1);
    $container-width: nth($mq-container-width, 2);

    @include mq($mq) {
      max-width: $container-width;
    }
  }

  @each $mq-container-indent in $mq-container-indents {
    $mq: nth($mq-container-indent, 1);
    $container-indent: nth($mq-container-indent, 2);

    @include mq($mq) {
      padding: {
        right: $container-indent;
        left:  $container-indent;
      };
    }
  }
}

// Grid
@mixin grid($main-axis: x, $justify-content: null, $align-items: null, $align-content: null) {
  display: flex;
  justify-content: $justify-content;
  align-items: $align-items;

  @if $main-axis == x {
    flex-wrap: wrap;
    align-content: $align-content;
  }

  @if $main-axis == y {
    flex-direction: column;
  }

  @each $mq-grid-gutter in $mq-grid-gutters {
    $mq: nth($mq-grid-gutter, 1);
    $grid-gutter: nth($mq-grid-gutter, 2);

    @include mq($mq) {
      margin: {
        right: half(-$grid-gutter);
        left:  half(-$grid-gutter);
      };
    }
  }
}

@mixin grid-col {
  @each $mq-grid-gutter in $mq-grid-gutters {
    $mq: nth($mq-grid-gutter, 1);
    $grid-gutter: nth($mq-grid-gutter, 2);

    @include mq($mq) {
      padding: {
        right: half($grid-gutter);
        left:  half($grid-gutter);
      };
    }
  }
}

@mixin grid-cols($cols-count, $cols-total) {
  width: $cols-count / $cols-total * 100%;
}

// Font
@mixin font($font-size, $line-height) {
  font-size: $font-size;
  line-height: strip-units($line-height) / strip-units($font-size);
}

// Text
@mixin text-large {
  @include font(1.6rem, 2.2rem);
}

@mixin text-base {
  @include font(1.4rem, 2rem);
}

@mixin text-small {
  @include font(1.2rem, 1.8rem);
}

@mixin h1 {
  @include font(3.2rem, 3.5rem);
  font-weight: 700;
  letter-spacing: -.01em;

  @include mq(sm) {
    @include font(3.6rem, 4rem);
  }

  @include mq(md) {
    @include font(4rem, 4rem);
  }
}

@mixin h2 {
  @include font(2.4rem, 2.5rem);
  font-weight: 700;
  letter-spacing: -.01em;

  @include mq(sm) {
    @include font(2.8rem, 3rem);
  }

  @include mq(md) {
    @include font(3.2rem, 3.5rem);
  }
}

@mixin h3 {
  @include font(1.8rem, 2.2rem);
  font-weight: 700;
  letter-spacing: -.01em;

  @include mq(sm) {
    @include font(2.2rem, 2.5rem);
  }

  @include mq(md) {
    @include font(2.6rem, 3rem);
  }
}

@mixin h4 {
  // Vacant
}

@mixin h5 {
  @include text-large;
  font-weight: 700;
}

@mixin h6 {
  @include text-base;
  font-weight: 400;
}


// custom

@mixin mq-custom($mq-range, $mq-breakpoint) {
  $mq-device: '';
  @if $enable-mq-device == true {
    $mq-device: '-device';
  }

  @media all and (#{$mq-range}#{$mq-device}-width: $mq-breakpoint) {
    @content;
  }
}

// triangle

@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}